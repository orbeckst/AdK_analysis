#!/usr/bin/env python
# $Id: Model.py 2673 2008-12-22 18:55:18Z oliver $

"""AdK transitions:

In order to model the AK Eco sequence onto different target templates,
get a ModelAdK instance and run Modeller:

m = AdK.ModelAdK(<target>)

Set target to the appropriate target sequence/pdb file (as listed in
AdK/seq/AdK_withlid_modeller.pir).


Run interactively in ipython or just the script from the command line:

  python lib/python/AdK/Model <target>

"""

import os,shutil

import AdK.config                   # generated by install.sh
from modeller import *
from modeller.automodel import *    # Load the automodel class

class ModelAdK(object):
    """Model E. coli adenylate kinase (AK_eco) on related crystal
    structures. All alignments are given in alnfile. 

    There MUST be a sequence with label 'AKeco': this is the sequence
    that is threaded through the target structure.

    Apart from the template (target) we are also using the CORE domain (as
    defined by Vonrhein et al, Structure 3 (1995)) of AK_eco in the apo (4AKE
    A) and holo (1AKE) state.

    All pdb files are kept in the 'atom_files' directory.

    Create the model with

        m = ModelAdK('1aky')
        m.run()

    The model with the best DOPE score is copied to 'AKeco_<target>.pdb'.
    """

    default_alnfilename = 'AdK_withlid_modeller.pir'
    sequencename = 'AKeco'

    def __init__(self,target,alnfile=None,Nmodels=10,maxdeviation=0.5,
                 basedir=AdK.config.basedir):
        """Set up Modeller run for <target>.

        m = ModelAdK(target,alnfile=None,Nmodels=10,maxdeviation=0.5)

        When creating the object, the target directory is set up and
        all necessary files are copied to the directory .

        NOTE: run the script from the BASEDIR, i.e. '.../AdK'.

        :Arguments:
        target       sequence in alnfile; pdb in 'atom_files/*.pdb' or
                     'coord/pdb/*.pdb'; target must exist in the alignment
        alnfile      path to the alignment file in Modeller pir format; 
                     None: use hardcoded default for AdK
        Nmodels      build <Nmodels> models
        maxdeviation maximum deviation in angstroem of the models from target
        basedir      top directory (default is set from AdK.config.basedir)
        """
        self.target = target

        # setup working directory
        self.basedir = os.path.realpath(basedir)
        self.workdir = os.path.join(self.basedir,'Models',self.target)
        self.resultsdir = os.path.join(self.basedir,'Models','all')

        mkdirhier(self.workdir)
        mkdirhier(self.resultsdir)

        self.atomfilesdir = os.path.join(self.basedir,'atom_files')
        self.pdbfilesdir = os.path.join(self.basedir,'coord','pdb')
        self.sequencedir = os.path.join(self.basedir,'seq')
        if alnfile is None:
            self.alnfile = os.path.join(self.sequencedir,self.default_alnfilename)

        self.cd_workdir()

        #log.verbose()
        log.level(output=1,notes=1,warnings=1,errors=1,memory=0)
        env = environ(rand_seed=-12312)  # To get different models from another script

        # directories for input atom files
        env.io.atom_files_directory = ":".join([os.curdir, 
                                                '../atom_files', 
                                                self.atomfilesdir,
                                                self.pdbfilesdir])
        #env.io.hetatm = True        # need for the HETATMs (ligand, metal ions, etc...)

        a = automodel(env, 
                      alnfile  = self.alnfile, 
                      knowns   = (target,'1ake_core','4ake_core'), 
                      sequence = self.sequencename,
                      assess_methods = assess.DOPE,
                      )
        a.starting_model = 1            # index of the first model
        a.ending_model   = Nmodels	# index of the last model (determines how many models to calculate)

        if Nmodels > 1 and maxdeviation <= 0:
            raise ValueError('For more than one model, maxdeviations must be > 0.')
        a.deviation = maxdeviation 	        # has to >0 if more than 1 model
        self.model = a
        self.cd_basedir()

    def _make(self):
        """Run Modeller and rank models"""
        a = self.model
        a.make()		        # do homology modelling

        # rank models by score = DOPE
        ok_models = [x for x in a.outputs if x['failure'] is None]

        def rank_models(ok_models,score='DOPE'):
            score_key = score+' score'
            ok_models.sort(lambda a,b: cmp(a[score_key],b[score_key]))
            m = ok_models[0]
            print "Top model: %s (%s %.3f)" % (m['name'],score,m[score_key])
            return m

        best_model = rank_models(ok_models,'DOPE')
        return best_model

    def run(self):
        """Build the model and copy the best model to results dir."""
        self.cd_workdir()
        best_model = self._make()
        best_pdb = best_model['name']
        final_pdb = self.sequencename + '_' + self.target + '.pdb'
        result_pdb = os.path.join(self.resultsdir,final_pdb)
        shutil.copy(best_pdb,final_pdb)
        shutil.copy(best_pdb,result_pdb)
        print "Final pdb: %s" % best_pdb
        print "Also saved as '%s'." % result_pdb
        self.cd_basedir()

    def cd_basedir(self):
        os.chdir(self.basedir)

    def cd_workdir(self):
        os.chdir(self.workdir)

def mkdirhier(directory):
    import os, errno
    try:
        os.makedirs(directory)
    except OSError,err:
        if err.errno <> errno.EEXIST:
            raise


if __name__ == '__main__':
    import sys
    
    try:
        target = sys.argv[1]
    except KeyError:
        print __doc__
        raise ValueError("usage: %s target_name" % sys.argv[0])

    M = ModelAdK(target)
    M.run()

